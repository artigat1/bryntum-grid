/*!
 *
 * Bryntum Grid 3.1.5 (TRIAL VERSION)
 *
 * Copyright(c) 2020 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
!(function (e, t) { typeof exports === 'object' && typeof module === 'object' ? module.exports = t() : typeof define === 'function' && define.amd ? define('examples.Ru', [], t) : typeof exports === 'object' ? exports['examples.Ru'] = t() : (e.bryntum = e.bryntum || {}, e.bryntum.locales = e.bryntum.locales || {}, e.bryntum.locales['examples.Ru'] = t()) }(window, function () { return (function (e) { var t = {}; function o (n) { if (t[n]) return t[n].exports; var r = t[n] = { i: n, l: !1, exports: {} }; return e[n].call(r.exports, r, r.exports, o), r.l = !0, r.exports } return o.m = e, o.c = t, o.d = function (e, t, n) { o.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: n }) }, o.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }) }, o.t = function (e, t) { if (1 & t && (e = o(e)), 8 & t) return e; if (4 & t && typeof e === 'object' && e && e.__esModule) return e; var n = Object.create(null); if (o.r(n), Object.defineProperty(n, 'default', { enumerable: !0, value: e }), 2 & t && typeof e !== 'string') for (var r in e)o.d(n, r, function (t) { return e[t] }.bind(null, r)); return n }, o.n = function (e) { var t = e && e.__esModule ? function () { return e.default } : function () { return e }; return o.d(t, 'a', t), t }, o.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, o.p = '', o(o.s = 5) }({ 1: function (e, t, o) { 'use strict'; o.r(t); var n = { localeName: 'Ru', localeDesc: 'Русский', Object: { Yes: 'Да', No: 'Нет', Cancel: 'Отмена', Custom: 'обычай' }, InstancePlugin: { fnMissing: function (e) { return 'Пытаемся связать метод '.concat(e.plugIntoName, '#').concat(e.fnName, ', но в плагине не был найден метод ').concat(e.pluginName, '#').concat(e.fnName) }, overrideFnMissing: function (e) { return 'Пытаемся перегрузить метод '.concat(e.plugIntoName, '#').concat(e.fnName, ', но в плагине не был найден метод ').concat(e.pluginName, '#').concat(e.fnName) } }, Field: { badInput: 'Недопустимое значение поля', patternMismatch: 'Значение должно соответствовать определенному шаблону', rangeOverflow: function (e) { return 'Значение должно быть меньше или равно '.concat(e.max) }, rangeUnderflow: function (e) { return 'Значение должно быть больше или равно '.concat(e.min) }, stepMismatch: 'Значение должно соответствовать шагу', tooLong: 'Значение должно быть короче', tooShort: 'Значение должно быть длиннее', typeMismatch: 'Значение должно быть в специальном формате', valueMissing: 'Поле не может быть пустым', invalidValue: 'Недопустимое значение поля', minimumValueViolation: 'Нарушение минимального значения', maximumValueViolation: 'Нарушение максимального значения', fieldRequired: 'Поле не может быть пустым', validateFilter: 'Выберите значение из списка' }, DateField: { invalidDate: 'Невернывй формат даты' }, TimeField: { invalidTime: 'Неверный формат времени' }, DateHelper: { locale: 'ru', shortWeek: 'нед', shortQuarter: 'квар', week: 'Hеделя', weekStartDay: 1, unitNames: [{ single: 'миллисек', plural: 'миллисек', abbrev: 'мс' }, { single: 'секунда', plural: 'секунд', abbrev: 'с' }, { single: 'минута', plural: 'минут', abbrev: 'мин' }, { single: 'час', plural: 'часов', abbrev: 'ч' }, { single: 'день', plural: 'дней', abbrev: 'д' }, { single: 'неделя', plural: 'недели', abbrev: 'нед' }, { single: 'месяц', plural: 'месяцев', abbrev: 'мес' }, { single: 'квартал', plural: 'кварталов', abbrev: 'квар' }, { single: 'год', plural: 'лет', abbrev: 'г' }], unitAbbreviations: [['мс', 'мил'], ['с', 'сек'], ['м', 'мин'], ['ч'], ['д', 'ден', 'дне'], ['н', 'нед'], ['мес'], ['к', 'квар', 'квр'], ['г']], parsers: { L: 'DD.MM.YYYY', LT: 'HH:mm' }, ordinalSuffix: function (e) { return ''.concat(e, '-й') } }, PagingToolbar: { firstPage: 'Перейти на первую страницу', prevPage: 'Перейти на предыдущую страницу', page: 'страница', nextPage: 'Перейти на следующую страницу', lastPage: 'Перейти на последнюю страницу', reload: 'Перезагрузить текущую страницу', noRecords: 'Нет записей для отображения', pageCountTemplate: function (e) { return 'из '.concat(e.lastPage) }, summaryTemplate: function (e) { return 'Показаны записи '.concat(e.start, ' - ').concat(e.end, ' из ').concat(e.allCount) } }, List: { loading: 'Загрузка...' } }; var r = { TemplateColumn: { noTemplate: 'TemplateColumn необходим шаблон', noFunction: 'TemplateColumn.template должен быть функцией' }, ColumnStore: { columnTypeNotFound: function (e) { return "Тип колонки '".concat(e.type, "' не зарегистрирован") } }, ColumnPicker: { columnsMenu: 'Колонки', hideColumn: 'Спрятать колонку', hideColumnShort: 'Спрятать' }, Filter: { applyFilter: 'Применить фильтр', filter: 'Фильтр', editFilter: 'Изменить фильтр', on: 'В этот день', before: 'До', after: 'После', equals: 'Равно', lessThan: 'Меньше, чем', moreThan: 'Больше, чем', removeFilter: 'Убрать фильтр' }, FilterBar: { enableFilterBar: 'Показать панель фильтров', disableFilterBar: 'Спрятать панель фильтров' }, Group: { groupAscending: 'Группа по возрастанию', groupDescending: 'Группа по убыванию', groupAscendingShort: 'Возрастание', groupDescendingShort: 'Убывание', stopGrouping: 'Убрать группу', stopGroupingShort: 'Убрать' }, Search: { searchForValue: 'Найти значение' }, Sort: { sortAscending: 'Сортировать по возрастанию', sortDescending: 'Сортировать по убыванию', multiSort: 'Сложная сортировка', removeSorter: 'Убрать сортировку', addSortAscending: 'Добавить сортировку по возрастанию', addSortDescending: 'Добавить сортировку по убыванию', toggleSortAscending: 'Сортировать по возрастанию', toggleSortDescending: 'Сортировать по убыванию', sortAscendingShort: 'Возрастание', sortDescendingShort: 'Убывание', removeSorterShort: 'Убрать', addSortAscendingShort: '+ Возраст...', addSortDescendingShort: '+ Убыв...' }, Tree: { noTreeColumn: 'Чтобы использовать дерево необходимо чтобы одна колонка имела настройку tree: true' }, Grid: { featureNotFound: function (e) { return "Опция '".concat(e, "' недоступна, убедитесь что она импортирована") }, invalidFeatureNameFormat: function (e) { return "Неверное имя функциональности '".concat(e, "', так как оно должно начинаться с маленькой буквы") } }, GridBase: { loadFailedMessage: 'Не удалось загрузить!', syncFailedMessage: 'Не удалось cинхронизировать!', serverResponseLabel: 'Ответ сервера:', unspecifiedFailure: 'Неуказанная ошибка', unknownFailure: 'Неизвестная ошибка', networkFailure: 'Ошибка сети', parseFailure: 'Не удалось разобрать ответ сервера', loadMask: 'Загрузка...', syncMask: 'Сохраняю данные, пожалуйста подождите...', noRows: 'Нет записей для отображения', removeRow: 'Удалить запись', removeRows: 'Удалить записи', moveColumnLeft: 'Передвинуть в левую секцию', moveColumnRight: 'Передвинуть в правую секцию' }, PdfExport: { 'Waiting for response from server...': 'Ожидание ответа от сервера...', 'Export failed': 'Не удалось экспортировать', 'Server error': 'На сервере произошла ошибка' }, ExportDialog: { width: '40em', labelWidth: '13em', exportSettings: 'Настройки', export: 'Экспорт', exporterType: 'Разбивка на страницы', cancel: 'Отмена', fileFormat: 'Формат файла', rows: 'Строки', alignRows: 'Выровнять строки', columns: 'Колонки', paperFormat: 'Размер листа', orientation: 'Ориентация' }, ExportRowsCombo: { all: 'Все строки', visible: 'Видимые строки' }, ExportOrientationCombo: { portrait: 'Портретная', landscape: 'Ландшафтная' }, SinglePageExporter: { singlepage: 'Одна страница' }, MultiPageExporter: { multipage: 'Многостраничный', exportingPage: function (e) { var t = e.currentPage; var o = e.totalPages; return 'Экспорт страницы '.concat(t, '/').concat(o) } } }; for (var a in n)r[a] = n[a]; t.default = r }, 5: function (e, t, o) { 'use strict'; o.r(t); o(1); t.default = { extends: 'Ru', YesNo: { Yes: 'Да', No: 'Нет' }, Column: { Name: 'Имя', Age: 'Возраст', City: 'Город', Food: 'Еда', Color: 'Цвет', 'Color (not sortable)': 'Цвет (нет сортировки)', Custom: 'Не стандартный', Link: 'Ссылка', 'First name': 'Имя', Surname: 'Фамилия', Team: 'Команда', 'Team (not filterable)': 'Команда (нет фильтрации)', Score: 'Счет', Rank: 'Рейтинг', Percent: 'Процент', Birthplace: 'Место рождения', Start: 'Начало', Finish: 'Конец', 'Finish (readonly)': 'Конец (только чтение)', Time: 'Время', Template: 'Шаблон', Date: 'Дата', Check: 'Флаг', Widget: 'Виджет', Contact: 'Контакт', Favorites: 'Избранное', 'Customer#': 'Клиент№', When: 'Когда', Brand: 'Брэнд', Model: 'Модель', 'Personal best': 'Личный рекорд', 'Current rank': 'Текущий рейтинг', Hometown: 'Родной город', Satisfaction: 'Удовлетворение', 'Favorite color': 'Любимый цвет', Rating: 'Рейтинг', Cooks: 'Готовит', Birthday: 'Дата рождения', Location: 'Место', 'Follow<br>up': 'Закончить', Purchases: 'Покупки', Value: 'Значение', Measurement: 'Измерение', Important: 'Важно', Deadline: 'Крайний срок', 'Sales#': 'Продажи, кол-во', 'Team (no search)': 'Команда (поиск отключен)', 'Name (custom)': 'Имя (настроенная подсказка)', 'Food (no tip)': 'Еда (подсказка отключена)', 'Color (async)': 'Цвет (асинхронная подсказка)', Make: 'Марка', Year: 'Год', 'Repair frequency': 'Частота ремонта', Capacity: 'Вместительность', Domestic: 'Местный', Airline: 'Авиакомпания', 'Responsible<br/>Manager': 'Ответственный<br/>менеджер', Id: '№', Progress: 'Прогресс', End: 'Конец', Duration: 'Длительность', 'Number of Subtasks': 'Количество подзадач', Started: 'Начато', 'In Progress': 'В процессе', Complete: 'Завершено', Reference: 'Ссылка', Modified: 'Изменено' }, Shared: { 'Locale changed': 'Язык изменен', Fullscreen: 'На весь экран', 'Click to show the built in code editor': 'Показать редактор кода', 'Click to show info and switch theme or locale': 'Показать информацию, переключить тему или язык', 'Select theme': 'Выбрать тему', 'Select locale': 'Выбрать язык', 'Select size': 'Выбрать размер', 'Full size': 'Полный размер', 'Phone size': 'Экран смартфона', 'Display hints': 'Показать подсказки', Automatically: 'Автоматически', 'Check to automatically display hints when loading the example': 'Автоматически показывать подсказки при загрузке примера' }, CodeEditor: { 'Code editor': 'Редактор кода', 'Download code': 'Скачать код', 'Auto apply': 'Применять автоматически', Apply: 'Применить' } } } })).default }))
