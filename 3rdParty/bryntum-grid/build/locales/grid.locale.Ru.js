/*!
 *
 * Bryntum Grid 3.1.5 (TRIAL VERSION)
 *
 * Copyright(c) 2020 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
!(function (e, n) { typeof exports === 'object' && typeof module === 'object' ? module.exports = n() : typeof define === 'function' && define.amd ? define('Ru', [], n) : typeof exports === 'object' ? exports.Ru = n() : (e.bryntum = e.bryntum || {}, e.bryntum.locales = e.bryntum.locales || {}, e.bryntum.locales.Ru = n()) }(window, function () { return (function (e) { var n = {}; function t (r) { if (n[r]) return n[r].exports; var o = n[r] = { i: r, l: !1, exports: {} }; return e[r].call(o.exports, o, o.exports, t), o.l = !0, o.exports } return t.m = e, t.c = n, t.d = function (e, n, r) { t.o(e, n) || Object.defineProperty(e, n, { enumerable: !0, get: r }) }, t.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }) }, t.t = function (e, n) { if (1 & n && (e = t(e)), 8 & n) return e; if (4 & n && typeof e === 'object' && e && e.__esModule) return e; var r = Object.create(null); if (t.r(r), Object.defineProperty(r, 'default', { enumerable: !0, value: e }), 2 & n && typeof e !== 'string') for (var o in e)t.d(r, o, function (n) { return e[n] }.bind(null, o)); return r }, t.n = function (e) { var n = e && e.__esModule ? function () { return e.default } : function () { return e }; return t.d(n, 'a', n), n }, t.o = function (e, n) { return Object.prototype.hasOwnProperty.call(e, n) }, t.p = '', t(t.s = 1) }([, function (e, n, t) { 'use strict'; t.r(n); var r = { localeName: 'Ru', localeDesc: 'Русский', Object: { Yes: 'Да', No: 'Нет', Cancel: 'Отмена', Custom: 'обычай' }, InstancePlugin: { fnMissing: function (e) { return 'Пытаемся связать метод '.concat(e.plugIntoName, '#').concat(e.fnName, ', но в плагине не был найден метод ').concat(e.pluginName, '#').concat(e.fnName) }, overrideFnMissing: function (e) { return 'Пытаемся перегрузить метод '.concat(e.plugIntoName, '#').concat(e.fnName, ', но в плагине не был найден метод ').concat(e.pluginName, '#').concat(e.fnName) } }, Field: { badInput: 'Недопустимое значение поля', patternMismatch: 'Значение должно соответствовать определенному шаблону', rangeOverflow: function (e) { return 'Значение должно быть меньше или равно '.concat(e.max) }, rangeUnderflow: function (e) { return 'Значение должно быть больше или равно '.concat(e.min) }, stepMismatch: 'Значение должно соответствовать шагу', tooLong: 'Значение должно быть короче', tooShort: 'Значение должно быть длиннее', typeMismatch: 'Значение должно быть в специальном формате', valueMissing: 'Поле не может быть пустым', invalidValue: 'Недопустимое значение поля', minimumValueViolation: 'Нарушение минимального значения', maximumValueViolation: 'Нарушение максимального значения', fieldRequired: 'Поле не может быть пустым', validateFilter: 'Выберите значение из списка' }, DateField: { invalidDate: 'Невернывй формат даты' }, TimeField: { invalidTime: 'Неверный формат времени' }, DateHelper: { locale: 'ru', shortWeek: 'нед', shortQuarter: 'квар', week: 'Hеделя', weekStartDay: 1, unitNames: [{ single: 'миллисек', plural: 'миллисек', abbrev: 'мс' }, { single: 'секунда', plural: 'секунд', abbrev: 'с' }, { single: 'минута', plural: 'минут', abbrev: 'мин' }, { single: 'час', plural: 'часов', abbrev: 'ч' }, { single: 'день', plural: 'дней', abbrev: 'д' }, { single: 'неделя', plural: 'недели', abbrev: 'нед' }, { single: 'месяц', plural: 'месяцев', abbrev: 'мес' }, { single: 'квартал', plural: 'кварталов', abbrev: 'квар' }, { single: 'год', plural: 'лет', abbrev: 'г' }], unitAbbreviations: [['мс', 'мил'], ['с', 'сек'], ['м', 'мин'], ['ч'], ['д', 'ден', 'дне'], ['н', 'нед'], ['мес'], ['к', 'квар', 'квр'], ['г']], parsers: { L: 'DD.MM.YYYY', LT: 'HH:mm' }, ordinalSuffix: function (e) { return ''.concat(e, '-й') } }, PagingToolbar: { firstPage: 'Перейти на первую страницу', prevPage: 'Перейти на предыдущую страницу', page: 'страница', nextPage: 'Перейти на следующую страницу', lastPage: 'Перейти на последнюю страницу', reload: 'Перезагрузить текущую страницу', noRecords: 'Нет записей для отображения', pageCountTemplate: function (e) { return 'из '.concat(e.lastPage) }, summaryTemplate: function (e) { return 'Показаны записи '.concat(e.start, ' - ').concat(e.end, ' из ').concat(e.allCount) } }, List: { loading: 'Загрузка...' } }; var o = { TemplateColumn: { noTemplate: 'TemplateColumn необходим шаблон', noFunction: 'TemplateColumn.template должен быть функцией' }, ColumnStore: { columnTypeNotFound: function (e) { return "Тип колонки '".concat(e.type, "' не зарегистрирован") } }, ColumnPicker: { columnsMenu: 'Колонки', hideColumn: 'Спрятать колонку', hideColumnShort: 'Спрятать' }, Filter: { applyFilter: 'Применить фильтр', filter: 'Фильтр', editFilter: 'Изменить фильтр', on: 'В этот день', before: 'До', after: 'После', equals: 'Равно', lessThan: 'Меньше, чем', moreThan: 'Больше, чем', removeFilter: 'Убрать фильтр' }, FilterBar: { enableFilterBar: 'Показать панель фильтров', disableFilterBar: 'Спрятать панель фильтров' }, Group: { groupAscending: 'Группа по возрастанию', groupDescending: 'Группа по убыванию', groupAscendingShort: 'Возрастание', groupDescendingShort: 'Убывание', stopGrouping: 'Убрать группу', stopGroupingShort: 'Убрать' }, Search: { searchForValue: 'Найти значение' }, Sort: { sortAscending: 'Сортировать по возрастанию', sortDescending: 'Сортировать по убыванию', multiSort: 'Сложная сортировка', removeSorter: 'Убрать сортировку', addSortAscending: 'Добавить сортировку по возрастанию', addSortDescending: 'Добавить сортировку по убыванию', toggleSortAscending: 'Сортировать по возрастанию', toggleSortDescending: 'Сортировать по убыванию', sortAscendingShort: 'Возрастание', sortDescendingShort: 'Убывание', removeSorterShort: 'Убрать', addSortAscendingShort: '+ Возраст...', addSortDescendingShort: '+ Убыв...' }, Tree: { noTreeColumn: 'Чтобы использовать дерево необходимо чтобы одна колонка имела настройку tree: true' }, Grid: { featureNotFound: function (e) { return "Опция '".concat(e, "' недоступна, убедитесь что она импортирована") }, invalidFeatureNameFormat: function (e) { return "Неверное имя функциональности '".concat(e, "', так как оно должно начинаться с маленькой буквы") } }, GridBase: { loadFailedMessage: 'Не удалось загрузить!', syncFailedMessage: 'Не удалось cинхронизировать!', serverResponseLabel: 'Ответ сервера:', unspecifiedFailure: 'Неуказанная ошибка', unknownFailure: 'Неизвестная ошибка', networkFailure: 'Ошибка сети', parseFailure: 'Не удалось разобрать ответ сервера', loadMask: 'Загрузка...', syncMask: 'Сохраняю данные, пожалуйста подождите...', noRows: 'Нет записей для отображения', removeRow: 'Удалить запись', removeRows: 'Удалить записи', moveColumnLeft: 'Передвинуть в левую секцию', moveColumnRight: 'Передвинуть в правую секцию' }, PdfExport: { 'Waiting for response from server...': 'Ожидание ответа от сервера...', 'Export failed': 'Не удалось экспортировать', 'Server error': 'На сервере произошла ошибка' }, ExportDialog: { width: '40em', labelWidth: '13em', exportSettings: 'Настройки', export: 'Экспорт', exporterType: 'Разбивка на страницы', cancel: 'Отмена', fileFormat: 'Формат файла', rows: 'Строки', alignRows: 'Выровнять строки', columns: 'Колонки', paperFormat: 'Размер листа', orientation: 'Ориентация' }, ExportRowsCombo: { all: 'Все строки', visible: 'Видимые строки' }, ExportOrientationCombo: { portrait: 'Портретная', landscape: 'Ландшафтная' }, SinglePageExporter: { singlepage: 'Одна страница' }, MultiPageExporter: { multipage: 'Многостраничный', exportingPage: function (e) { var n = e.currentPage; var t = e.totalPages; return 'Экспорт страницы '.concat(n, '/').concat(t) } } }; for (var a in r)o[a] = r[a]; n.default = o }])).default }))
